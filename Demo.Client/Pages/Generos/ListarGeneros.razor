@page "/generos"
@inject SweetAlertService Swal;
@inject GeneroRepositorio respositorio
@inject NavigationManager navigationManager

<h3>Listar Generos</h3>

<div class="mb-3">
    <a class="btn btn-info" href="generos/crear">Agregar Genero</a>
</div>


@if (Generos == null)
{
    <p>Cargando ...</p>
}
else
{

    if (Generos.Count < 1)
    {
        <p>No hay registros</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Nombre</th>
                    <th scope="col">Editar</th>
                    <th scope="col">Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var genero in Generos)
                {
                    <tr>
                        <th scope="row">@genero.Id</th>
                        <td>@genero.Nombre</td>
                        <td>
                            <a href="/generos/editar/@genero.Id" class="btn btn-success">Editar</a>
                        </td>
                        <td>

                            <button class="btn btn-danger" @onclick="()=> Borrar(genero)"> Borrar </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}





@code {
    public List<Genero> Generos { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }


    private async Task Cargar()
    {
        // await Task.Delay(3000);
        var data = await respositorio.Get("api/generos");
        Generos = data;
    }


    private async Task Borrar(Genero genero)
    {

        var data = await respositorio.Delete($"api/generos/{genero.Id}");

        if (data)
        {           
            await Cargar();
        }
        else
        {
           
        }
    }




    // protected override Task OnParametersSetAsync()
    // {
    //     return base.OnParametersSetAsync();
    // }

    // protected override Task OnAfterRenderAsync(bool firstRender)
    // {
    //     return base.OnAfterRenderAsync(firstRender);
    // }
}
